/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardCreateTripImport } from './routes/dashboard/create-trip'
import { Route as DashboardAgentImport } from './routes/dashboard/agent'
import { Route as DashboardLayoutImport } from './routes/dashboard/_layout'
import { Route as AdminCreateTripImport } from './routes/admin/create-trip'
import { Route as AdminBookingsImport } from './routes/admin/bookings'
import { Route as AgentTripTripIdImport } from './routes/agent/trip/$tripId'

// Create Virtual Routes

const DashboardImport = createFileRoute('/dashboard')()

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCreateTripRoute = DashboardCreateTripImport.update({
  id: '/create-trip',
  path: '/create-trip',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardAgentRoute = DashboardAgentImport.update({
  id: '/agent',
  path: '/agent',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardLayoutRoute = DashboardLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => DashboardRoute,
} as any)

const AdminCreateTripRoute = AdminCreateTripImport.update({
  id: '/admin/create-trip',
  path: '/admin/create-trip',
  getParentRoute: () => rootRoute,
} as any)

const AdminBookingsRoute = AdminBookingsImport.update({
  id: '/admin/bookings',
  path: '/admin/bookings',
  getParentRoute: () => rootRoute,
} as any)

const AgentTripTripIdRoute = AgentTripTripIdImport.update({
  id: '/agent/trip/$tripId',
  path: '/agent/trip/$tripId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/admin/bookings': {
      id: '/admin/bookings'
      path: '/admin/bookings'
      fullPath: '/admin/bookings'
      preLoaderRoute: typeof AdminBookingsImport
      parentRoute: typeof rootRoute
    }
    '/admin/create-trip': {
      id: '/admin/create-trip'
      path: '/admin/create-trip'
      fullPath: '/admin/create-trip'
      preLoaderRoute: typeof AdminCreateTripImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/_layout': {
      id: '/dashboard/_layout'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/agent': {
      id: '/dashboard/agent'
      path: '/agent'
      fullPath: '/dashboard/agent'
      preLoaderRoute: typeof DashboardAgentImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/create-trip': {
      id: '/dashboard/create-trip'
      path: '/create-trip'
      fullPath: '/dashboard/create-trip'
      preLoaderRoute: typeof DashboardCreateTripImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/agent/trip/$tripId': {
      id: '/agent/trip/$tripId'
      path: '/agent/trip/$tripId'
      fullPath: '/agent/trip/$tripId'
      preLoaderRoute: typeof AgentTripTripIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardLayoutRoute: typeof DashboardLayoutRoute
  DashboardAgentRoute: typeof DashboardAgentRoute
  DashboardCreateTripRoute: typeof DashboardCreateTripRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardLayoutRoute: DashboardLayoutRoute,
  DashboardAgentRoute: DashboardAgentRoute,
  DashboardCreateTripRoute: DashboardCreateTripRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRoute
  '/login': typeof LoginRoute
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/create-trip': typeof AdminCreateTripRoute
  '/dashboard': typeof DashboardLayoutRoute
  '/dashboard/agent': typeof DashboardAgentRoute
  '/dashboard/create-trip': typeof DashboardCreateTripRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/agent/trip/$tripId': typeof AgentTripTripIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRoute
  '/login': typeof LoginRoute
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/create-trip': typeof AdminCreateTripRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/agent': typeof DashboardAgentRoute
  '/dashboard/create-trip': typeof DashboardCreateTripRoute
  '/agent/trip/$tripId': typeof AgentTripTripIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRoute
  '/login': typeof LoginRoute
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/create-trip': typeof AdminCreateTripRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/_layout': typeof DashboardLayoutRoute
  '/dashboard/agent': typeof DashboardAgentRoute
  '/dashboard/create-trip': typeof DashboardCreateTripRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/agent/trip/$tripId': typeof AgentTripTripIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/admin/bookings'
    | '/admin/create-trip'
    | '/dashboard'
    | '/dashboard/agent'
    | '/dashboard/create-trip'
    | '/dashboard/'
    | '/agent/trip/$tripId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/admin/bookings'
    | '/admin/create-trip'
    | '/dashboard'
    | '/dashboard/agent'
    | '/dashboard/create-trip'
    | '/agent/trip/$tripId'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/login'
    | '/admin/bookings'
    | '/admin/create-trip'
    | '/dashboard'
    | '/dashboard/_layout'
    | '/dashboard/agent'
    | '/dashboard/create-trip'
    | '/dashboard/'
    | '/agent/trip/$tripId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRoute
  LoginRoute: typeof LoginRoute
  AdminBookingsRoute: typeof AdminBookingsRoute
  AdminCreateTripRoute: typeof AdminCreateTripRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  AgentTripTripIdRoute: typeof AgentTripTripIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRoute,
  LoginRoute: LoginRoute,
  AdminBookingsRoute: AdminBookingsRoute,
  AdminCreateTripRoute: AdminCreateTripRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AgentTripTripIdRoute: AgentTripTripIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/login",
        "/admin/bookings",
        "/admin/create-trip",
        "/dashboard",
        "/agent/trip/$tripId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/admin/bookings": {
      "filePath": "admin/bookings.tsx"
    },
    "/admin/create-trip": {
      "filePath": "admin/create-trip.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard",
      "children": [
        "/dashboard/_layout",
        "/dashboard/agent",
        "/dashboard/create-trip",
        "/dashboard/"
      ]
    },
    "/dashboard/_layout": {
      "filePath": "dashboard/_layout.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/agent": {
      "filePath": "dashboard/agent.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/create-trip": {
      "filePath": "dashboard/create-trip.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/agent/trip/$tripId": {
      "filePath": "agent/trip/$tripId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
